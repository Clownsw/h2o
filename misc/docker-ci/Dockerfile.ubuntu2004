FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get --yes update && apt-get install --yes \
	apache2-utils \
	bison \
	clang \
	cmake \
	cmake-data \
	dnsutils \
	flex \
	git \
	libbrotli-dev \
	libc-ares-dev \
	libcap-dev \
	libclang-dev \
	libedit-dev \
	libelf-dev \
	libev-dev \
	libuv1-dev \
	llvm-dev \
	libllvm7 \
	llvm-7-dev \
	libclang-7-dev \
	libnghttp2-dev \
	zlib1g-dev \
	memcached \
	net-tools \
	netcat-openbsd \
	nghttp2-client \
	php-cgi \
	pkgconf \
	python3 \
	python3-distutils \
	redis-server \
	ruby-dev \
	sudo \
	systemtap-sdt-dev \
	time \
	wget

# curl with http2 and http3 support
# https://curl.se/docs/http3.html
ENV CURL_VERSION=7.83.1
ENV CURL_INSTALL_DIR=/usr/local
WORKDIR /root
RUN apt-get install --yes libtool autoconf && chmod 777 /root

# curl-quiche (HTTP/3 using Quiche and BoringSSL)
RUN wget --https-only --no-verbose -O - https://sh.rustup.rs | sh -s -- \
		-y \
		--profile minimal \
		--default-toolchain 1.60.0 \
	&& (git clone --recursive --branch 0.13.0 --depth 1 https://github.com/cloudflare/quiche \
		&& cd quiche \
		&& CC=clang CXX=clang++ $HOME/.cargo/bin/cargo build --package quiche --release --features ffi,pkg-config-meta,qlog \
		&& mkdir quiche/deps/boringssl/src/lib \
		&& ln -vnf $(find target/release -name libcrypto.a -o -name libssl.a) quiche/deps/boringssl/src/lib/ \
		&& find . -name '*.so' -delete) \
	&& (wget --https-only --no-verbose -O - "https://curl.se/download/curl-${CURL_VERSION}.tar.bz2" | tar xjf - \
		&& cd "curl-${CURL_VERSION}" \
		&& USE_CURL_SSLKEYLOGFILE=true ./configure --prefix="${CURL_INSTALL_DIR}" --with-nghttp2 --disable-shared  CC=clang CXX=clang++ LDFLAGS="-Wl,-rpath,$PWD/../quiche/target/release" --with-openssl="$PWD/../quiche/quiche/deps/boringssl/src" --with-quiche="$PWD/../quiche/target/release" --program-suffix="-quiche" \
		&& make -j"$(nproc)" V=1 && make -j"$(nproc)" V=1 install) \
	&& (rm -rf quiche "curl-${CURL_VERSION}") \
	&& curl-quiche --version \
	&& curl-quiche -sSfv --http3 https://http3.is > /dev/null

# curl-ngtcp2 (HTTP/3 using ngtcp2+nghttp3 and a patched OpenSSL)
RUN (git clone --depth 1 --branch openssl-3.0.3+quic https://github.com/quictls/openssl \
		&& cd openssl \
		&& CC=clang CXX=clang++ ./config enable-tls1_3 --prefix="${HOME}/curl" \
		&& make -j"$(nproc)" V=1 && make -j"$(nproc)" V=1 install) \
	&& (git clone --depth 1 --branch v0.4.1 https://github.com/ngtcp2/nghttp3 \
		&& cd nghttp3 \
		&& autoreconf -fi \
		&& ./configure CC=clang CXX=clang++ PKG_CONFIG_PATH="${HOME}/curl/lib/pkgconfig:${HOME}/curl/lib64/pkgconfig" LDFLAGS="-Wl,-rpath,${HOME}/curl/lib:${HOME}/curl/lib64" --prefix="${HOME}/curl" --enable-lib-only --disable-shared \
		&& make -j"$(nproc)" V=1 && make -j"$(nproc)" V=1 install) \
	&& (git clone --depth 1 --branch v0.5.0 https://github.com/ngtcp2/ngtcp2 \
		&& cd ngtcp2 \
		&& autoreconf -fi \
		&& ./configure CC=clang CXX=clang++ PKG_CONFIG_PATH="${HOME}/curl/lib/pkgconfig:${HOME}/curl/lib64/pkgconfig" LDFLAGS="-Wl,-rpath,${HOME}/curl/lib:${HOME}/curl/lib64" "--prefix=${HOME}/curl" --enable-lib-only --disable-shared \
		&& make -j"$(nproc)" V=1 && make -j"$(nproc)" V=1 install) \
	&& (find "${HOME}/curl" -name '*.so*' -delete) \
	&& (wget --https-only --no-verbose -O - "https://curl.se/download/curl-${CURL_VERSION}.tar.bz2" | tar xjf - \
		&& cd "curl-${CURL_VERSION}" \
		&& USE_CURL_SSLKEYLOGFILE=true ./configure CC=clang CXX=clang++ LDFLAGS="-Wl,-rpath,${HOME}/curl/lib:${HOME}/curl/lib64" --prefix="${CURL_INSTALL_DIR}" --with-nghttp2 --disable-shared --with-openssl="${HOME}/curl" --with-ngtcp2="${HOME}/curl" --with-nghttp3="${HOME}/curl" --program-suffix="-ngtcp2" \
		&& make -j"$(nproc)" V=1 && make -j"$(nproc)" V=1 install) \
	&& (rm -rf openssl nghttp3 ngtcp2 "curl-${CURL_VERSION}" curl) \
	&& curl-ngtcp2 --version \
	&& curl-ngtcp2 -sSfv --http3 https://http3.is > /dev/null \
	&& ln -s "${CURL_INSTALL_DIR}/bin/curl-ngtcp2" "${CURL_INSTALL_DIR}/bin/curl"

# libssl-dev causes curl to fail to build with http3 (quiche).
# Once curl is built with BoringSSL's static libraries, libssl-dev can be installed without affecting curl.
RUN apt-get install --yes libssl-dev

# perl
RUN apt-get install --yes \
	cpanminus \
	libfcgi-perl \
	libfcgi-procmanager-perl \
	libipc-signal-perl \
	libjson-perl \
	liblist-moreutils-perl \
	libplack-perl \
	libscope-guard-perl \
	libtest-exception-perl \
	libwww-perl \
	libio-socket-ssl-perl
ENV PERL_CPANM_OPT="--mirror https://cpan.metacpan.org/"
RUN cpanm -n Test::More Starlet Protocol::HTTP2 Net::DNS::Nameserver Test::TCP

# h2spec
RUN curl -Ls https://github.com/i110/h2spec/releases/download/v2.2.0-4e8cc7e/h2spec_linux_amd64.tar.gz | tar zx -C /usr/local/bin

# bcc and bpftrace
RUN apt-get install --yes \
	libbpfcc-dev
RUN git clone --branch kazuho/usdt-attach-all-locations https://github.com/kazuho/bpftrace.git && \
	cd bpftrace && \
	mkdir build &&  \
	cd build && \
	cmake -DLLVM_REQUESTED_VERSION=7 .. && \
	make && \
	make install && \
	make clean

# use dumb-init
RUN wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.1/dumb-init_1.2.1_amd64 \
 && chmod +x /usr/local/bin/dumb-init

# komake
RUN wget -O /usr/local/bin/komake https://raw.githubusercontent.com/kazuho/komake/main/komake && chmod +x /usr/local/bin/komake

# create user
RUN useradd --create-home ci
RUN echo 'ci ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
WORKDIR /home/ci
USER ci

ENTRYPOINT ["/usr/local/bin/dumb-init"]
